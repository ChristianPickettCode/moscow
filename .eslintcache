[{"/Users/christianpickett/Documents/dashboard/src/reportWebVitals.js":"1","/Users/christianpickett/Documents/dashboard/src/App.js":"2","/Users/christianpickett/Documents/dashboard/src/index.js":"3","/Users/christianpickett/Documents/dashboard/src/components/Landing.js":"4","/Users/christianpickett/Documents/dashboard/src/components/Dashboard.js":"5","/Users/christianpickett/Documents/dashboard/src/graphql/queries.js":"6","/Users/christianpickett/Documents/dashboard/src/graphql/mutations.js":"7","/Users/christianpickett/Documents/dashboard/src/aws-exports.js":"8"},{"size":362,"mtime":1608872160974,"results":"9","hashOfConfig":"10"},{"size":606,"mtime":1608883345062,"results":"11","hashOfConfig":"10"},{"size":854,"mtime":1608944058541,"results":"12","hashOfConfig":"10"},{"size":6308,"mtime":1609110706881,"results":"13","hashOfConfig":"10"},{"size":19275,"mtime":1609108242772,"results":"14","hashOfConfig":"10"},{"size":3535,"mtime":1609082916394,"results":"15","hashOfConfig":"10"},{"size":5155,"mtime":1609082916508,"results":"16","hashOfConfig":"10"},{"size":478,"mtime":1608934390629,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"omqkdv",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/christianpickett/Documents/dashboard/src/reportWebVitals.js",[],["37","38"],"/Users/christianpickett/Documents/dashboard/src/App.js",[],["39","40"],"/Users/christianpickett/Documents/dashboard/src/index.js",[],"/Users/christianpickett/Documents/dashboard/src/components/Landing.js",[],"/Users/christianpickett/Documents/dashboard/src/components/Dashboard.js",["41"],"import React, { useEffect, useState } from 'react';\nimport { Input, Layout, Menu, Row, Spin, Table, Button , Tag, Form, Divider, Alert} from 'antd';\nimport {\n  SettingOutlined,\n  RocketOutlined,\n  LogoutOutlined,\n  UserOutlined,\n  DashboardOutlined\n} from '@ant-design/icons';\n\nimport {\n    Switch,\n    Route,\n    Link,\n    useLocation\n  } from \"react-router-dom\";\n\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n// import { ghcolors, vs } from 'react-syntax-highlighter/dist/esm/styles/prism';\n\nimport { API, graphqlOperation } from \"aws-amplify\";\nimport * as mutations from \"../graphql/mutations\";\nimport * as queries from \"../graphql/queries\";\n\nimport moment from \"moment\";\n// import { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { github } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nconst { Content, Sider } = Layout;\nconst { SubMenu } = Menu;\nconst { Search } = Input;\n\nconst Dashboard = (props) => {\n\n    const codeSnippet = `\n    func App() {\n        return(\n            <Bridge \n                request={{ \n                    data: [\"email\", \"name\"], // \"name\" is optional\n                    appName: \"your app name\", \n                    appID: \"your app id\" }}>\n                <Home />\n            </Bridge>\n        ) \n    }\n    `\n\n    const codeSnippet2 = `\n    const Home = (prop) => {\n        return(\n            <div>\n                { props.user ?\n                    <div>\n                        <p>{props.user.email}</p>\n                        <button onClick={props.logout}>logout</button>\n                    </div>\n                : \n                    <div>\n                        <button onClick={props.login}>login</button>\n                    </div>\n                }\n            </div>\n        ) \n    }\n    `\n    const location = useLocation();\n    const [userData, setUserData] = useState(null);\n    const [appName, setAppName] = useState(\"\");\n    const [apiKeys, setApiKeys] = useState([]);\n    const [form] = Form.useForm();\n    const [connectCount, setConnectCount] = useState(0);\n    const [transferCount, setTransferCount] = useState(0);\n\n    const getUser = async (id) => {\n        return await API.graphql(graphqlOperation(queries.getUser, { id }));\n    };\n\n    const createUser = async (id, email, name) => {\n        return await API.graphql(\n            graphqlOperation(mutations.createUser, {\n                input: {\n                id,\n                email,\n                firstName: name\n                },\n            })\n        );\n    };\n\n    const callGetUser = () => {\n        getUser(props.user.userAppID)\n            .then((res) => {\n                if (res.data.getUser === null) {\n                    console.log(\"CREATE NEW USER\");\n                    createUser(props.user.userAppID, props.user.email, props.user.name).then(res => {\n                        setUserData(res.data.createUser); \n                    }).catch(err => {\n                        console.log(err);\n                    });\n                } else {\n                    // console.log(\"GET USER\", res.data.getUser);\n                    setUserData(res.data.getUser);\n                    let keys = res.data.getUser.apiKeys.items;\n                    keys.forEach(item => {\n                        session(item.id).then(res => {\n                            const sess = res.data.listSessions.items;\n                            const sortedSess = sess.sort((a,b) => new Date(b.createdAt) - new Date(a.createdAt))\n                            item.sessions = sortedSess;\n                            \n                        })\n                    });\n                    setApiKeys(keys);\n                }\n            })\n            .catch((err) => console.log(err));\n    }\n\n    useEffect(() => {\n        if (props.user) {\n            callGetUser();\n            setInterval(callGetUser, 30000);\n        }\n    }, [props.user]);\n\n    useEffect(() => {\n        setConnectCount(0);\n        setTransferCount(0);\n        if (userData) {\n            userData.apiKeys.items.forEach(item => {\n                API.graphql(graphqlOperation(queries.listSessions, {\n                    filter: {\n                        apiKeyID: {\n                            eq: item.id\n                        }\n                    }\n                })).then(res => {\n                    res.data.listSessions.items.forEach(i => {\n                        if (i.type === \"CONNECT\") {\n                            setConnectCount(prev => prev + 1);\n                        }\n                        if (i.type === \"TRANSFER\") {\n                            setTransferCount(prev => prev + 1);\n                        }\n                    })\n                }).catch(err => {\n                    console.log(err);\n                })\n            })\n        }\n        // console.log(userData)\n    }, [userData])\n\n\n    const createKey = async (name) => {\n        return await API.graphql(graphqlOperation(mutations.createApiKey, {\n            input : {\n                appName: name,\n                userID: userData.id,\n                sessionCount: 0\n            }\n        }))\n    }\n\n    const create = () => {\n        if (appName && appName !== \"\") {\n            createKey(appName)\n                .then(res => {\n                    setApiKeys(prev => [...prev, res.data.createApiKey])\n                    setAppName(\"\");\n                })\n                .catch(err => { console.log(err); });\n        }\n        \n    }\n\n    const deleteKey = async (id) => {\n        return await API.graphql(graphqlOperation(mutations.deleteApiKey, {\n            input: {\n                id\n            }\n        }));\n    }\n\n    const delKey = (item) => {\n        deleteKey(item.id)\n            .then(res => {\n                console.log(res);\n                setApiKeys(prev => prev.filter(i => i.id !== item.id));\n            })\n            .catch(err => { console.log(err); })\n    }\n\n    const getSession = async(id) => {\n        return await API.graphql(graphqlOperation(queries.listSessions, {\n            filter: {\n                apiKeyID: {\n                    eq: id\n                }\n            }\n        }));\n    }\n\n    const session = (id) => {\n        return getSession(id);\n    }\n\n\n    return (\n        <Layout style={{ minHeight: '100vh' }}>\n            <Sider \n                theme=\"light\"\n                style={{\n                    overflow: 'auto',\n                    height: '100vh',\n                    position: 'fixed',\n                    left: 0,\n                  }} >\n                <Menu  defaultSelectedKeys={[location.pathname]} defaultOpenKeys={['/get-started']} mode=\"inline\">\n                    <div style={{width:\"100%\", padding:\"0 0 0 10%\", margin:\"15% 0 15% 0\"}}>\n                        <h2>\"Atlis\"</h2>\n                    </div>\n                    <Menu.Item key=\"/\" icon={<DashboardOutlined />}>\n                        <Link to=\"/\">Dashboard</Link>\n                    </Menu.Item>\n                    <SubMenu key=\"/get-started\" icon={<RocketOutlined />}  title=\"Get Started\">\n                        <Menu.Item key=\"/create-key\">\n                            <Link to=\"/create-key\">Create Key</Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"/setup\">\n                            <Link to=\"/setup\">Setup</Link>\n                        </Menu.Item>\n                    </SubMenu>\n                    <SubMenu key=\"/setting\" icon={<SettingOutlined />} title=\"Settings\">\n                        <Menu.Item key=\"/account\" icon={<UserOutlined />}><Link to=\"/account\">Account</Link></Menu.Item>\n                        <Menu.Item key=\"/logout\" icon={<LogoutOutlined />} onClick={props.logout}><Link to=\"/\">Logout</Link></Menu.Item>\n                    </SubMenu>\n                </Menu>\n            </Sider>\n            <Layout className=\"site-layout\" style={{marginLeft:\"200px\"}}>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Content style={{ margin: '2% auto 0 auto', width:\"95%\", textAlign:\"left\"}}>\n                            <Content style={{ width:\"100%\", backgroundColor:\"white\", border:\"1px #c4c4c4 solid\", marginBottom:\"2vh\"}}>\n                                <div style={{ padding: \"2%\" }}>\n                                    <h3 style={{margin:\"0\"}}>Welcome {props.user.name}</h3>\n                                </div>\n                            </Content>\n\n                            <Row>\n                                <Tag color=\"orange\" style={{padding:\"8px\"}}>CONNECT : {connectCount}</Tag>\n                                <Tag color=\"cyan\" style={{padding:\"8px\"}}>TRANSFER : {transferCount}</Tag>\n                            </Row>\n                            <Content>\n                                { userData ? \n                                        <Table \n                                            style={{ margin: '2% auto 2% auto'}}\n                                            rowKey=\"id\"\n                                            dataSource={apiKeys} \n                                            expandable={{\n                                                expandedRowRender: item => {\n                                                    return(\n                                                        <Table \n                                                            rowKey=\"id\"\n                                                            dataSource={item.sessions}\n                                                            columns={[\n                                                                { title:\"Type\", dataIndex:\"type\", render: type => (<Tag color={type === \"CONNECT\" ? \"orange\" : \"cyan\"}>{type}</Tag>)},\n                                                                { title:\"ID\", dataIndex:\"id\"},\n                                                                { title:\"Time\", dataIndex:\"createdAt\", render: date => (<>{moment(new Date(date)).fromNow()}</>)},\n                                                            ]}\n                                                        />\n                                                    )},\n                                            }}\n                                            columns={[\n                                                { title : \"App Name\", dataIndex:\"appName\" },\n                                                { title : \"App ID\", dataIndex:\"id\" },\n                                                { title : \"Session Count\", dataIndex:\"sessionCount\", sorter:(a,b) => (a.sessionCount - b.sessionCount) },\n                                                { title : \"Last Active\", dataIndex:\"updatedAt\", sorter:(a,b) => (new Date(a.updatedAt) - new Date(b.updatedAt)), render: date => (<>{moment(new Date(date)).fromNow()}</>)}]}  \n                                            />\n                                    : <div style={{textAlign:\"center\", margin: \"10% auto\"}}><Spin/></div>}\n                            </Content>\n                        </Content>\n                    </Route>\n                    <Route path=\"/create-key\">\n                        <>\n                            <Content style={{ margin: '2% auto 0 auto', width:\"95%\", textAlign:\"left\" }}>\n                                \n                                <Alert message=\"Get started by creating an api key\" type=\"success\" closable style={{marginBottom:\"2vh\"}} />\n\n                                <Content style={{ width:\"100%\", backgroundColor:\"white\", border:\"1px #c4c4c4 solid\", marginBottom:\"2vh\"}}>\n                                    <div style={{padding:\"2%\"}}>\n                                        <h3>Create Api Key</h3>\n                                        <Row>\n                                            <Search value={appName} onChange={(e) => setAppName(e.target.value)} enterButton=\"Create\" placeholder=\"Enter an application name\" onSearch={create} />\n                                        </Row>\n                                    </div>\n                                </Content>\n\n                                { userData ? \n                                    <Table \n                                        style={{ margin: '2% auto 2% auto'}}\n                                        rowKey=\"id\"\n                                        dataSource={apiKeys.sort((a,b) => new Date(b.createdAt) - new Date(a.createdAt))} \n                                        columns={[\n                                            { title : \"App Name\", dataIndex:\"appName\" },\n                                            { title : \"App ID\", dataIndex:\"id\" },\n                                            { title : \"Session Count\", dataIndex:\"sessionCount\" },\n                                            { title : \"Created At\", dataIndex:\"createdAt\", render: date => (<>{moment(new Date(date)).fromNow()}</>)},\n                                            { title : \"Action\", render: (item) => (<Button type=\"primary\" danger onClick={() => delKey(item)}>Delete</Button>)} ]} />\n                                : <div style={{textAlign:\"center\", margin: \"10% auto\"}}><Spin/></div>}\n                            </Content>\n                        </>\n                    </Route>\n                    <Route path=\"/setup\">\n                        <>\n                            <Content style={{ margin: '2% auto 0 auto', width:\"95%\", textAlign:\"left\"}}>\n\n                                <Content style={{ width:\"100%\", backgroundColor:\"white\", border:\"1px #c4c4c4 solid\", marginBottom:\"2vh\"}}>\n                                    <div style={{ padding: \"2%\" }}>\n                                        <h3 style={{margin:\"0\"}}>1. Install Package</h3>\n                                        <Divider style={{marginTop:\"10px\", marginBottom:\"10px\"}} />\n                                        <SyntaxHighlighter language=\"javascript\" style={github}>\n                                            yarn add @esotterik/bridge-library\n                                        </SyntaxHighlighter>\n                                        <SyntaxHighlighter language=\"javascript\" style={github}>\n                                            npm install @esotterik/bridge-library\n                                        </SyntaxHighlighter>\n                                    </div>\n                                </Content>\n\n                                <Content style={{ width:\"100%\", backgroundColor:\"white\", border:\"1px #c4c4c4 solid\", marginBottom:\"2vh\"}}>\n                                    <div style={{ padding: \"2%\" }}>\n                                        <h3 style={{margin:\"0\"}}>2. Wrap Application</h3>\n                                        <Divider style={{marginTop:\"10px\", marginBottom:\"10px\"}} />\n                                        {/* <code style={{fontSize:\"0.85em\"}}>{codeSnippet}</code>*/}\n                                        <SyntaxHighlighter language=\"javascript\" style={github}>\n                                            {codeSnippet}\n                                        </SyntaxHighlighter>  \n                                    </div>\n                                </Content>\n                                \n\n                                <Content style={{ width:\"100%\", backgroundColor:\"white\", border:\"1px #c4c4c4 solid\", marginBottom:\"2vh\"}}>\n                                    <div style={{ padding: \"2%\" }}>\n                                        <p style={{margin:\"0\"}}>The data array contains the fields that will be requested from the user. Replace <b>\"your app name\"</b> and <b>\"your app id\"</b> with your created App Name key and App ID. <b>\"name\"</b> is optional and more available parameters will be added.</p>\n                                    </div>\n                                </Content>\n\n                                <Content style={{ width:\"100%\", backgroundColor:\"white\", border:\"1px #c4c4c4 solid\", marginBottom:\"2vh\"}}>\n                                    <div style={{ padding: \"2%\" }}>\n                                        <h3 style={{margin:\"0\"}}>3. Access Props</h3>\n                                        <Divider style={{marginTop:\"10px\", marginBottom:\"10px\"}} />\n                                        <p>Within your Home component with prop you have access to the user object and login and logout functions.</p>\n                                        <SyntaxHighlighter language=\"javascript\" style={github}>\n                                            {codeSnippet2}\n                                        </SyntaxHighlighter>  \n\n                                    </div>\n                                </Content>\n                            </Content>\n                        </>\n                    </Route>\n                    <Route path=\"/account\">\n                        <>\n                            <Content style={{ margin: '2% auto 0 auto', width:\"95%\", textAlign:\"left\"}}>\n                                <Content style={{ width:\"100%\", backgroundColor:\"white\", border:\"1px #c4c4c4 solid\", marginBottom:\"2vh\"}}>\n                                    <div style={{ padding: \"2%\" }}>\n                                        <h3 style={{margin:\"0\"}}>Account</h3>\n                                    </div>\n                                    \n                                </Content>\n                                <Content style={{ width:\"100%\", backgroundColor:\"white\", border:\"1px #c4c4c4 solid\", marginBottom:\"2vh\"}}>\n                                    <div style={{ padding: \"2%\" }}>\n                                        {userData ? \n                                            <Form\n                                                layout=\"vertical\"\n                                                form={form} >\n                                                <Form.Item label=\"Name\">\n                                                    <Input value={userData.firstName}  placeholder=\"input placeholder\" />\n                                                </Form.Item>\n                                                {/* <Form.Item label=\"Last Name\">\n                                                    <Input value={userData.lastName}  placeholder=\"input placeholder\" />\n                                                </Form.Item> */}\n                                                <Form.Item label=\"Email\">\n                                                    <Input value={userData.email} placeholder=\"input placeholder\" />\n                                                </Form.Item>\n                                                <Form.Item>\n                                                    <Button type=\"primary\">Edit</Button>\n                                                </Form.Item>\n                                            </Form>\n                                        \n                                        : <Spin />}\n\n                                    </div>\n                                    \n                                </Content>\n                            </Content>\n                        </>\n                    </Route>\n                </Switch>\n                \n            </Layout>\n      </Layout>\n    )\n}\n\nexport default Dashboard\n","/Users/christianpickett/Documents/dashboard/src/graphql/queries.js",[],"/Users/christianpickett/Documents/dashboard/src/graphql/mutations.js",[],"/Users/christianpickett/Documents/dashboard/src/aws-exports.js",[],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"42","replacedBy":"46"},{"ruleId":"44","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":125,"column":8,"nodeType":"50","endLine":125,"endColumn":20,"suggestions":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],["52"],["53"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'callGetUser'. Either include it or remove the dependency array.","ArrayExpression",["54"],"no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},"Update the dependencies array to be: [callGetUser, props.user]",{"range":"57","text":"58"},[3920,3932],"[callGetUser, props.user]"]